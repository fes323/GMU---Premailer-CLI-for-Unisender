import datetime
import os
import re
from io import BytesIO
from pathlib import Path
from typing import Dict, Tuple

import cairosvg
from bs4 import BeautifulSoup, Comment
from dotenv import load_dotenv
from PIL import Image
from premailer import transform
from rich.console import Console
from rich.progress import track

from gmu.utils.logger import gmu_logger

load_dotenv()
console = Console()


class HTMLProcessor:
    def __init__(self, html_filename: str, images_folder: str = "images", replace_src: bool = True, rename_images: bool = True):
        """
        html_filename  : –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ HTML-—Ñ–∞–π–ª–∞.
        images_folder : –ø–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        replace_src   : –∑–∞–º–µ–Ω—è—Ç—å –ª–∏ src –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É—Ç–∏ –≤–Ω—É—Ç—Ä–∏ HTML (True/False).
        rename_images : –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (True/False).
        """

        self.html_filename = html_filename
        self.images_folder = images_folder
        self.replace_src = replace_src
        self.rename_images = rename_images

        self.original_html = None
        self.soup = None
        self.sender_name = None
        self.sender_email = None
        self.subject = None
        self.preheader = None
        self.language = None
        # –°–ø–∏—Å–æ–∫ (—Å—Ç–∞—Ä–æ–µ_–∏–º—è, –Ω—É–∂–Ω–∞—è_—à–∏—Ä–∏–Ω–∞)
        self.images_info = []
        # –°–ª–æ–≤–∞—Ä—å "–Ω–æ–≤–æ–µ_–∏–º—è ‚Üí bytes"
        self.attachments = {}
        # –°–ª–æ–≤–∞—Ä—å "—Å—Ç–∞—Ä–æ–µ_–∏–º—è ‚Üí –Ω–æ–≤–æ–µ_–∏–º—è"
        self.image_renames = {}
        self.size = None
        self.result_html = None

        self._load_html()

    def _load_html(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ self.original_html."""
        if not self.html_filename:
            html_files = list(Path(".").glob("*.html"))
            if not html_files:
                raise FileNotFoundError(
                    "HTML file not found in this directory")
            html_file = html_files[0]
        else:
            html_file = Path(self.html_filename)
            if not html_file.exists():
                raise FileNotFoundError(f"File {html_file} not found")

        self.original_html = html_file.read_text(encoding="utf-8")

    def _get_soup(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç BeautifulSoup –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ HTML."""
        self.soup = BeautifulSoup(self.original_html, "html.parser")

    def _extract_sender_name(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ meta-—Ç–µ–≥–∞ name='sender-name'."""
        sender_name_tag = self.soup.find("meta", attrs={"name": "sender-name"})
        if sender_name_tag:
            self.sender_name = sender_name_tag.get("content", "Unknown Sender")
        else:
            gmu_logger.critical("Sender name not found in HTML meta tags")

    def _extract_sender_mail(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ meta-—Ç–µ–≥–∞ name='sender-email'."""
        sender_email_tag = self.soup.find(
            "meta", attrs={"name": "sender-email"})
        if sender_email_tag:
            self.sender_email = sender_email_tag.get(
                "content", "Unknown Email")
        else:
            gmu_logger.critical("Sender email not found in HTML meta tags")

    def _extract_subject(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç <title> –∫–∞–∫ —Ç–µ–º—É –ø–∏—Å—å–º–∞ (subject)."""
        self.subject = self.soup.title.string if self.soup.title else "No Subject"

    def _extract_preheader(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ¬´–ø—Ä–µ—Ö–µ–¥–µ—Ä¬ª (preheader) –∏–∑ –ø–µ—Ä–≤–æ–≥–æ <div style="display: none">,
        –µ—Å–ª–∏ —Ç–∞–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.
        """
        hidden_divs = self.soup.find_all(
            lambda tag: tag.name == 'div' and 'display: none' in tag.get(
                'style', '')
        )
        for div in hidden_divs:
            text = div.get_text(separator=' ', strip=True)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Å—Ç–æ—è–ª —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤/–Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
            if text and not re.fullmatch(r'[\s\u200b\xa0&zwnj; ]+', text):
                self.preheader = text
            else:
                self.preheader = None
            break

    def _extract_language(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —è–∑—ã–∫ (lang) –∏–∑ <html> –∏–ª–∏, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏, –∏–∑ <body> / –ø–µ—Ä–≤–æ–≥–æ <div> —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º lang.
        """
        html_tag = self.soup.find('html')
        if html_tag and html_tag.has_attr('lang'):
            self.language = html_tag['lang']

        body_tag = self.soup.find('body')
        if body_tag and body_tag.has_attr('lang') and self.language is None:
            self.language = body_tag['lang']

        div_lang = self.soup.find(
            lambda tag: tag.name == 'div' and tag.has_attr('lang'))
        if div_lang and self.language is None:
            self.language = div_lang['lang']

    def _find_images(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç—ç–≥–∏ <img> –≤ HTML, —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–º–µ–Ω–∞, —Ç—Ä–µ–±—É–µ–º—É—é —à–∏—Ä–∏–Ω—É)."""
        console.print("\nüìÉ Finding images in HTML")
        found_images = []
        for tag in track(self.soup.find_all("img"), description=""):
            src = tag.get("src")
            data_width = tag.get("data-width")
            width = int(
                data_width) if data_width and data_width.isdigit() else None
            if src:
                # –ï—Å–ª–∏ replace_src=True, —Ç–æ –≤ HTML –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞,
                # –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å images/filename.
                tag['src'] = Path(
                    src).name if self.replace_src else f"images/{Path(src).name}"
                found_images.append((Path(src).name, width))
        self.images_info = found_images

    def _process_attachments(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è svg ‚Üí png, —Ä–µ—Å–∞–π–∑ –∏ —Å–∂–∞—Ç–∏–µ,
        –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—è –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—á—ë—Ç—á–∏–∫—É.
        """
        console.print("üñºÔ∏è  Processing images")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å-–º–µ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–æ–¥–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        time_prefix = datetime.datetime.now().strftime("%d%m%Y%H%M")
        # –í–µ–¥—ë–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–º—ë–Ω
        image_counter = 1

        def _resize_and_compress_image(
            image_bytes: bytes,
            target_width: int = None,
            output_format: str = None
        ) -> bytes:
            """
            –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π)
            –∏ —Å–∂–∏–º–∞–µ—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
            """
            with Image.open(BytesIO(image_bytes)) as img:
                # –ï—Å–ª–∏ output_format –Ω–µ –∑–∞–¥–∞–Ω, –±–µ—Ä—ë–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Å–∞–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ PNG
                img_format = output_format if output_format else (
                    img.format if img.format else 'PNG')
                save_params = {}

                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É —Ä–µ–∂–∏–º—É (JPEG ‚Üí RGB)
                if img_format and img_format.upper() == 'JPEG' and img.mode != 'RGB':
                    img = img.convert('RGB')
                elif img.mode not in ('RGBA', 'LA', 'RGB'):
                    img = img.convert('RGB')

                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è
                if img_format and img_format.upper() == "JPEG":
                    save_params['quality'] = 75
                    save_params['optimize'] = True
                elif img_format and img_format.upper() == "PNG":
                    save_params['optimize'] = True
                    save_params['compress_level'] = 9

                # –†–µ—Å–∞–π–∑, –µ—Å–ª–∏ target_width –∑–∞–¥–∞–Ω –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ
                if target_width and img.width > target_width:
                    w_percent = target_width / float(img.width)
                    target_height = int(img.height * w_percent)
                    img = img.resize(
                        (target_width, target_height), Image.Resampling.LANCZOS)

                output = BytesIO()
                img.save(output, format=img_format, **save_params)
                return output.getvalue()

        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É (fname, width)
        for fname, width in track(self.images_info, description=""):
            # –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É (–Ω–µ —Å–æ–∑–¥–∞—ë–º –¥—É–±–ª—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è)
            if fname in self.image_renames:
                continue

            img_file = Path(self.images_folder) / fname
            if not img_file.exists():
                gmu_logger.warning(
                    f"Image {fname} not found in {self.images_folder}/")
                console.print(
                    f"[bold yellow]WARNING:[/bold yellow] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {fname} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {self.images_folder}/"
                )
                continue

            file_bytes = img_file.read_bytes()
            ext = fname.split('.')[-1].lower()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ (–≤ —Å–ª—É—á–∞–µ rename_images) –æ–¥–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            # –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.rename_images:
                # –§–æ—Ä–º–∞—Ç: DDMMYYYYHHMM_—Å—á—ë—Ç—á–∏–∫
                # (final_ext –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                tentative_name = f"{time_prefix}_{image_counter}"
                image_counter += 1
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º .png –¥–ª—è svg)
                # –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, —á—Ç–æ–±—ã svg ‚Üí png –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–ø–∏—Å–∞–ª—Å—è
                tentative_name = fname.rsplit('.', 1)[0]

            # 1. SVG ‚Üí PNG
            if ext == 'svg':
                try:
                    png_bytes = cairosvg.svg2png(bytestring=file_bytes)
                    final_ext = '.png'
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ—Å–∞–π–∑–∏—Ç—å
                    png_bytes = (_resize_and_compress_image(png_bytes, target_width=width, output_format='PNG')
                                 if width else _resize_and_compress_image(png_bytes, output_format='PNG'))

                    if self.rename_images:
                        new_name = f"{tentative_name}{final_ext}"
                    else:
                        # —Å—Ç–∞—Ä–æ–µ –∏–º—è, –Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ‚Üí .png
                        # tentative_name —É–∂–µ –±–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                        new_name = f"{tentative_name}{final_ext}"

                    self.attachments[new_name] = png_bytes
                    self.image_renames[fname] = new_name
                except Exception as e:
                    gmu_logger.critical(f"{fname} not converted to png: {e}")
                    console.print(
                        f"[bold red]ERROR:[/bold red] SVG to PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {fname}: {e}"
                    )
                continue

            # 2. GIF: –Ω–µ —Ä–µ—Å–∞–π–∑–∏–º, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if ext == 'gif':
                max_gif_size = 500 * 1024  # 500 KB
                if len(file_bytes) > max_gif_size:
                    gmu_logger.warning(f"GIF {fname} is larger than 500 kb")
                    console.print(
                        f"[bold red]EXCEPTION:[/bold red] GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{fname}' "
                        f"—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {len(file_bytes)//1024} –ö–ë"
                    )
                    raise Exception(
                        f"[EXCEPTION] GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{fname}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {len(file_bytes)//1024} –ö–ë"
                    )
                gmu_logger.info(
                    f"GIF images do not resize. data-width ignored. {fname} skip.")
                console.print(
                    f"[bold yellow]WARNING:[/bold yellow] GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Ä–µ—Å–∞–π–∑—è—Ç—Å—è. '{fname}' –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ."
                )

                if self.rename_images:
                    # .gif ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    new_name = f"{tentative_name}.gif"
                else:
                    new_name = fname

                self.attachments[new_name] = file_bytes
                self.image_renames[fname] = new_name
                continue

            # 3. –û—Å—Ç–∞–ª—å–Ω—ã–µ (jpg / jpeg / png / ...)
            try:
                if ext in ('jpg', 'jpeg'):
                    img_format = 'JPEG'
                    final_ext = '.jpg'  # –∏–ª–∏ .jpeg; –æ–±—ã—á–Ω–æ .jpg
                elif ext == 'png':
                    img_format = 'PNG'
                    final_ext = '.png'
                else:
                    img_format = None
                    final_ext = f".{ext}"

                processed_bytes = _resize_and_compress_image(
                    file_bytes,
                    target_width=width if width else None,
                    output_format=img_format
                )

                if self.rename_images:
                    new_name = f"{tentative_name}{final_ext}"
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
                    new_name = fname

                self.attachments[new_name] = processed_bytes
                self.image_renames[fname] = new_name
                gmu_logger.info(
                    f"Image {fname} successfully resized and compressed.")
            except Exception as e:
                gmu_logger.critical(
                    f"Error while processing image {fname}: {e}")
                console.print(
                    f"[bold red]ERROR:[/bold red] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {fname}: {e}"
                )
                # –û—à–∏–±–∫–∞ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–∏–º —Ñ–∞–π–ª –≤–æ –≤–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
                if self.rename_images:
                    new_name = f"{tentative_name}{final_ext}"
                else:
                    new_name = fname

                self.attachments[new_name] = file_bytes
                self.image_renames[fname] = new_name

    def _update_image_sources(self):
        """
        –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏),
        –ø—Ä–æ–π–¥—ë–º—Å—è –ø–æ <img> –∏ –æ–±–Ω–æ–≤–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã src –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–µ –∏–º–µ–Ω–∞.
        """
        console.print("üîÅ Updating <img> src in HTML")
        for tag in track(self.soup.find_all("img"), description=""):
            old_src = tag.get("src")
            old_basename = os.path.basename(old_src)
            # –ï—Å–ª–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –∏–º—è
            if old_basename in self.image_renames:
                new_fname = self.image_renames[old_basename]
                if self.replace_src:
                    tag['src'] = Path(new_fname).name
                else:
                    tag['src'] = f"{self.images_folder}/{Path(new_fname).name}"

    def _remove_spaces_from_style(self):
        """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ style –≤–æ –≤—Å–µ—Ö —Ç–µ–≥–∞—Ö."""
        def _optimize_style(style_string):
            style_string = re.sub(r'\s*:\s*', ':', style_string)
            style_string = re.sub(r'\s*;\s*', ';', style_string)
            return style_string.strip()

        all_tags_with_style = self.soup.find_all(style=True)
        for tag in all_tags_with_style:
            tag['style'] = _optimize_style(tag['style'])

    def _inline_css(self):
        """–ò–Ω–ª–∞–π–Ω–∏—Ç –≤—Å–µ —Å—Ç–∏–ª–∏ —Å –ø–æ–º–æ—â—å—é premailer –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Outlook-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
        def _extract_conditional_comments(html_str: str) -> Tuple[str, Dict[str, str]]:
            """
            –ù–∞—Ö–æ–¥–∏—Ç outlook-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ([if ... mso]) –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã.
            """
            pattern = re.compile(
                r'<!--\[(if(?=[^\]]*mso).*?endif)\]-->', re.DOTALL | re.IGNORECASE)
            comments_map = {}

            def replacer(match):
                key = f"<!--COND_COMMENT_{len(comments_map)}-->"
                comments_map[key] = match.group(0)
                return key

            modified_html = pattern.sub(replacer, html_str)
            return modified_html, comments_map

        def _restore_conditional_comments(html_str: str, comments_map: Dict[str, str]) -> str:
            """
            –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç outlook-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–∞–Ω–µ–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º.
            """
            for placeholder, comment in comments_map.items():
                html_str = html_str.replace(placeholder, comment)
            return html_str

        # 1. –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫—Ä–æ–º–µ Outlook-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        html_str = str(self.soup)
        soup_no_comments = BeautifulSoup(html_str, 'html.parser')
        for comment in soup_no_comments.find_all(string=lambda text: isinstance(text, Comment)):
            # –£–±–∏—Ä–∞–µ–º inline-—Ñ–ª–∞–≥ (?i) –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º re.IGNORECASE
            if not re.match(r'\[if[^\]]*mso', comment, re.IGNORECASE):
                comment.extract()
        clean_html = str(soup_no_comments)

        # 2. –ü—Ä—è—á–µ–º Outlook-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        modified_html, comments = _extract_conditional_comments(clean_html)

        # 3. –ò–Ω–ª–∞–π–Ω CSS —á–µ—Ä–µ–∑ premailer
        inlined_html = transform(
            modified_html,
            keep_style_tags=False,
            remove_classes=False,
            preserve_internal_links=True,
            strip_important=False,
            cssutils_logging_level='CRITICAL',
            cssutils_logging_handler=None
        )

        # 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Outlook-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        self.result_html = _restore_conditional_comments(
            inlined_html, comments)

    def _get_size(self):
        """–°—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞"""
        total_bytes = 0
        for attachment_bytes in self.attachments.values():
            total_bytes += len(attachment_bytes)

        total_bytes += len(self.result_html)
        total_megabytes = total_bytes / (1024 * 1024)

        self.size = ":.2f".format(total_megabytes)

    def process(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏."""

        # 1. –†–∞–∑–±–æ—Ä HTML, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
        self._get_soup()
        self._extract_sender_name()
        self._extract_sender_mail()
        self._extract_subject()
        self._extract_preheader()
        self._extract_language()

        # 2. –ü–æ–∏—Å–∫ <img>, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._find_images()
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–æ–Ω–≤–µ—Ä—Å–∏—è, —Ä–µ—Å–∞–π–∑, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
        self._process_attachments()
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ <img src> –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–µ –∏–º–µ–Ω–∞
        self._update_image_sources()
        # 5. –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ inline-style
        self._remove_spaces_from_style()
        # 6. –ò–Ω–ª–∞–π–Ω CSS (premailer)
        self._inline_css()

        self._get_size()

        return {
            'data': {
                'sender_name': self.sender_name,
                'sender_email': self.sender_email,
                'subject': self.subject,
                'preheader': self.preheader,
                'language': self.language,
                'size': self.size
            },
            'attachments': self.attachments,
            'inlined_html': self.result_html,
        }
